{"version":3,"sources":["components/Header.js","components/UserInput.js","components/PostItem.js","components/PostList.js","components/Subreddits.js","components/App.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["Header","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","src","logo","alt","React","Component","Search","Input","UserInput","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","userInput","onInputChange","e","setState","target","onAdd","props","add","style","width","placeholder","enterButton","size","onSearch","onPressEnter","onChange","PostItem","href","permalink","rel","title","PostList","children","error","parsePosts","$","ajax","url","name","method","then","response","data","_response$responseJSO","responseJSON","message","color","map","_ref","index","PostItem_PostItem","TabPane","Tabs","Subreddits","activeKey","onEdit","targetKey","action","updateLocalStorage","panes","object","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","push","err","return","localStorage","setItem","JSON","stringify","subredditsName","newTabIndex","content","PostList_PostList","closable","remove","lastIndex","forEach","pane","i","filter","items","parse","getItem","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","marginTop","marginBottom","UserInput_UserInput","tabs","hideAdd","type","tab","App","Header_Header","Subreddits_Subreddits","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8a7c2b93.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from \"../assets/logo.svg\"\r\n\r\nexport class Header extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <h1 className=\"App-title\">Subreddits Reader</h1>\r\n            </header>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Input } from 'antd';\r\n\r\nconst Search = Input.Search;\r\n\r\nexport class UserInput extends React.Component {\r\n    state = {\r\n        userInput: ''\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        });\r\n    }\r\n\r\n    onAdd = () => {\r\n        if (this.state.userInput) {\r\n            this.props.add(this.state.userInput);\r\n        }\r\n\r\n        this.setState({\r\n            userInput: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    style={{ width: \"700px\" }}\r\n                    placeholder=\"input Subreddit. e.g. r/javascript\"\r\n                    enterButton=\"Add Subreddit\"\r\n                    size=\"large\"\r\n                    onSearch={this.onAdd}\r\n                    onPressEnter={this.onAdd}\r\n                    onChange={this.onInputChange}\r\n                    value={this.state.userInput}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport class PostItem extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <a\r\n                    href={`https://www.reddit.com${this.props.permalink}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    <p className=\"post-text\">{this.props.title}</p>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport $ from 'jquery';\r\nimport {PostItem} from \"./PostItem\"\r\n\r\nexport class PostList extends React.Component {\r\n    state = {\r\n        children: [],\r\n        error: ''\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.parsePosts();\r\n    }\r\n\r\n    parsePosts = () => {\r\n        $.ajax({\r\n            url: `https://www.reddit.com/${this.props.name}.json`,\r\n            method: 'GET',\r\n        }).then(\r\n            (response) => {\r\n                // console.log(response);\r\n                if (response.data) {\r\n                    this.setState({\r\n                        children: response.data.children,\r\n                        error: ''\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        error: `No such data`\r\n                    });\r\n                }\r\n\r\n            },\r\n            (response) => {\r\n                const {message, error} = response.responseJSON;\r\n                this.setState({\r\n                    error: `${error} ${message}`\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"post-list\">\r\n                {\r\n                    this.state.error ?\r\n                        <p style={ {color: 'red'} }>Error: {this.state.error}</p> :\r\n                        this.state.children.map(({data}, index) => (\r\n                                <PostItem\r\n                                    title={data.title}\r\n                                    permalink={data.permalink}\r\n                                    key={index}\r\n                                />\r\n                            )\r\n                        )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport {UserInput} from \"./UserInput\"\r\nimport {PostList} from \"./PostList\"\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nexport class Subreddits extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.newTabIndex = 0;\r\n        const panes = [\r\n            { title: 'r/news', content: <PostList name='r/news'/>, key: '1', closable: false },\r\n        ];\r\n        this.state = {\r\n            activeKey: panes[0].key,\r\n            panes,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const items = JSON.parse(localStorage.getItem(\"tabs\"));\r\n        if (!items) {\r\n            return;\r\n        }\r\n        const panes = this.state.panes;\r\n        for (let title of items) {\r\n            if (title !== \"r/news\") {\r\n                panes.push({\r\n                    title,\r\n                    content: <PostList name={title}/>,\r\n                    key: `newTab${this.newTabIndex++}`,\r\n                    closable: true\r\n                });\r\n            }\r\n        }\r\n        this.setState({panes});\r\n    }\r\n\r\n    onChange = (activeKey) => {\r\n        this.setState({ activeKey });\r\n    }\r\n\r\n    onEdit = (targetKey, action) => {\r\n        this[action](targetKey);\r\n    }\r\n\r\n    updateLocalStorage = (panes) => {\r\n        const object = [];\r\n        for (let item of panes) {\r\n            object.push(item.title);\r\n        }\r\n        // console.log(JSON.stringify(object));\r\n        localStorage.setItem(\"tabs\", JSON.stringify(object));\r\n    }\r\n\r\n    add = (subredditsName) => {\r\n        const panes = this.state.panes;\r\n        const activeKey = `newTab${this.newTabIndex++}`;\r\n        panes.push({title: subredditsName, content: <PostList name={subredditsName}/>, key: activeKey, closable: true});\r\n        this.setState({ panes, activeKey });\r\n        this.updateLocalStorage(panes);\r\n    }\r\n\r\n    remove = (targetKey) => {\r\n        let activeKey = this.state.activeKey;\r\n        let lastIndex;\r\n        this.state.panes.forEach((pane, i) => {\r\n            if (pane.key === targetKey) {\r\n                lastIndex = i - 1;\r\n            }\r\n        });\r\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\r\n        if (lastIndex >= 0 && activeKey === targetKey) {\r\n            activeKey = panes[lastIndex].key;\r\n        }\r\n        this.setState({ panes, activeKey });\r\n        this.updateLocalStorage(panes);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{ marginTop: 16, marginBottom: 16 }}>\r\n                    <UserInput add={this.add}/>\r\n                </div>\r\n                <Tabs\r\n                    hideAdd\r\n                    onChange={this.onChange}\r\n                    activeKey={this.state.activeKey}\r\n                    type=\"editable-card\"\r\n                    onEdit={this.onEdit}\r\n                >\r\n                    {this.state.panes.map(pane =>\r\n                        <TabPane\r\n                            tab={pane.title}\r\n                            key={pane.key}\r\n                            closable={pane.closable}\r\n                        >\r\n                            {pane.content}\r\n                        </TabPane>)\r\n                    }\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport {Header} from \"./Header\"\nimport {Subreddits} from \"./Subreddits\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Subreddits />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}